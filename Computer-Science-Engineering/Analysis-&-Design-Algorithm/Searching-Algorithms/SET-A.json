{
  "data": [
    {
      "question": "What is recurrence for worst case of QuickSort and what is the time complexity in Worst case?",
      "a": "Recurrence is T(n) = T(n-2) + O(n) and time complexity is O(n^2)",
      "b": "Recurrence is T(n) = T(n-1) + O(n) and time complexity is O(n^2)",
      "c": "Recurrence is T(n) = 2T(n/2) + O(n) and time complexity is O(nLogn)",
      "d": "Recurrence is T(n) = T(n/10) + T(9n/10) + O(n) and time complexity is O(nLogn)",
      "answer": "b"
    },
    {
      "question": "Suppose we have a O(n) time algorithm that finds median of an unsorted array. Now consider a QuickSort implementation where we first find median using the above algorithm, then use median as pivot. What will be the worst case time complexity of this modified QuickSort.",
      "a": "O(n^2 Logn)",
      "b": "O(n^2)",
      "c": "O(n Logn Logn)",
      "d": "O(nLogn)",
      "answer": "d"
    },
    {
      "question": "Given an unsorted array. The array has this property that every element in array is at most k distance from its position in sorted array where k is a positive integer smaller than size of array. Which sorting algorithm can be easily modified for sorting this array and what is the obtainable time complexity?",
      "a": "Insertion Sort with time complexity O(kn)",
      "b": "Heap Sort with time complexity O(nLogk)",
      "c": "Quick Sort with time complexity O(kLogk)",
      "d": "Merge Sort with time complexity O(kLogk)",
      "answer": "b"
    },
    {
      "question": "Which of the following is not true about comparison based sorting algorithms?",
      "a": "The minimum possible time complexity of a comparison based sorting algorithm is O(nLogn) for a random input array",
      "b": "Any comparison based sorting algorithm can be made stable by using position as a criteria when two elements are compared",
      "c": "Counting Sort is not a comparison based sorting algortihm",
      "d": "Heap Sort is not a comparison based sorting algorithm.",
      "answer": "d"
    },
    {
      "question": "What is time complexity of fun()?\nint fun(int n)\n{\n  int count = 0;\n  for (int i = n; i > 0; i /= 2)\n     for (int j = 0; j < i; j++)\n        count += 1;\n  return count;\n}\nRun on IDE",
      "a": "O(n^2)",
      "b": "O(nLogn)",
      "c": "O(n)",
      "d": "O(nLognLogn)",
      "answer": "c"
    },
    {
      "question": "What is the time complexity of fun()?\nint fun(int n)\n{\n  int count = 0;\n  for (int i = 0; i < n; i++)\n     for (int j = i; j > 0; j--)\n        count = count + 1;\n  return count;\n} \nRun on IDE",
      "a": "Theta (n)",
      "b": "Theta (n^2)",
      "c": "Theta (n*Logn)",
      "d": "Theta (nLognLogn)",
      "answer": "b"
    },
    {
      "question": "The recurrence relation capturing the optimal time of the Tower of Hanoi problem with n discs is. (GATE CS 2012)",
      "a": "T(n) = 2T(n – 2) + 2",
      "b": "T(n) = 2T(n – 1) + n",
      "c": "T(n) = 2T(n/2) + 1",
      "d": "T(n) = 2T(n – 1) + 1",
      "answer": "d"
    },
    {
      "question": "Let w(n) and A(n) denote respectively, the worst case and average case running time of an algorithm executed on an input of size n. which of the following is ALWAYS TRUE? (GATE CS 2012)\n(A) \n(B) \n(C) \n(D) ",
      "a": "A",
      "b": "B",
      "c": "C",
      "d": "D",
      "answer": "c"
    },
    {
      "question": "Which of the following is not O(n^2)?",
      "a": "(15^10) * n + 12099",
      "b": "n^1.98",
      "c": "n^3 / (sqrt(n))",
      "d": "(2^20) * n",
      "answer": "c"
    },
    {
      "question": "Which of the given options provides the increasing order of asymptotic complexity of functions f1, f2, f3 and f4?\n  f1(n) = 2^n\n  f2(n) = n^(3/2)\n  f3(n) = nLogn\n  f4(n) = n^(Logn)",
      "a": "f3, f2, f4, f1",
      "b": "f3, f2, f1, f4",
      "c": "f2, f3, f1, f4",
      "d": "f2, f3, f4, f1",
      "answer": "a"
    }
  ]
}
